{"uid":"39826cec4f97fc9f","name":"test_scene_02","fullName":"test_cases.test_scene.TestScene#test_scene_02","historyId":"fd829e5902ac878cab70e5d85f09e59c","time":{"start":1658062602781,"stop":1658062603070,"duration":289},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_scene.TestScene object at 0x7fb440be9e10>\n\n    @allure.story('场景测试02')\n    def test_scene_02(self):\n        ru = RequestUtil()\n        cjru = SceneRequestUtil('scene_02', ru)\n>       cjru.yamlAndRequest()\n\n../test_cases/test_scene.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../utils/SceneRequestUtil.py:76: in yamlAndRequest\n    dict['validate']['msg'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requestUtil.RequestUtil object at 0x7fb440c06410>\nresult = <Response [200]>, statusCode = 200, errorCode = 400, msg = '用户名已存在'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        \"\"\"\n        断言实际接口返回数据\n        :param result:\n        :param statusCode:\n        :param errorCode:\n        :param msg:\n        :return:\n        \"\"\"\n        with allure.step('发生请求'):\n            allure.attach(str(result.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code), '响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode), '预期响应状态码')\n            allure.attach(str(errorCode), '预期返回错误码 status')\n            allure.attach(msg, '预期返回错误信息msg')\n    \n            assert result.status_code == int(statusCode)\n>           assert result.json()['status'] == int(errorCode)\nE           AssertionError\n\n../utils/requestUtil.py:103: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_scene.TestScene object at 0x7fb440be9e10>\n\n    @allure.story('场景测试02')\n    def test_scene_02(self):\n        ru = RequestUtil()\n        cjru = SceneRequestUtil('scene_02', ru)\n>       cjru.yamlAndRequest()\n\n../test_cases/test_scene.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../utils/SceneRequestUtil.py:76: in yamlAndRequest\n    dict['validate']['msg'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requestUtil.RequestUtil object at 0x7fb440c06410>\nresult = <Response [200]>, statusCode = 200, errorCode = 400, msg = '用户名已存在'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        \"\"\"\n        断言实际接口返回数据\n        :param result:\n        :param statusCode:\n        :param errorCode:\n        :param msg:\n        :return:\n        \"\"\"\n        with allure.step('发生请求'):\n            allure.attach(str(result.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code), '响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode), '预期响应状态码')\n            allure.attach(str(errorCode), '预期返回错误码 status')\n            allure.attach(msg, '预期返回错误信息msg')\n    \n            assert result.status_code == int(statusCode)\n>           assert result.json()['status'] == int(errorCode)\nE           AssertionError\n\n../utils/requestUtil.py:103: AssertionError","steps":[{"name":"请求接口：mcheckImg","time":{"start":1658062602785,"stop":1658062602909,"duration":124},"status":"passed","steps":[{"name":"发生请求","time":{"start":1658062602895,"stop":1658062602895,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"77274c60fae0ee35","name":"请求路径","source":"77274c60fae0ee35.attach","type":"text/plain","size":42},{"uid":"58a575387217fdb0","name":"请求方式","source":"58a575387217fdb0.attach","type":"text/plain","size":3},{"uid":"5451d3665699d9f","name":"请求头","source":"5451d3665699d9f.attach","type":"text/plain","size":121},{"uid":"74f61c49c1118eb0","name":"请求体","source":"74f61c49c1118eb0.attach","type":"text/plain","size":4}],"parameters":[],"stepsCount":0,"attachmentsCount":4,"shouldDisplayMessage":false,"hasContent":true},{"name":"获取响应","time":{"start":1658062602895,"stop":1658062602896,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8621ebfdc830883a","name":"响应状态码","source":"8621ebfdc830883a.attach","type":"text/plain","size":3},{"uid":"f0f0f285ae8bc685","name":"响应头","source":"f0f0f285ae8bc685.attach","type":"text/plain","size":262},{"uid":"15a0fabc1de98f4f","name":"响应文本","source":"15a0fabc1de98f4f.attach","type":"text/plain","size":53}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"断言","time":{"start":1658062602896,"stop":1658062602896,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"4c16d612bd9799b0","name":"预期响应状态码","source":"4c16d612bd9799b0.attach","type":"text/plain","size":3},{"uid":"f52e1643f5b6d522","name":"预期返回错误码 status","source":"f52e1643f5b6d522.attach","type":"text/plain","size":3},{"uid":"70db8d32da3d7ef0","name":"预期返回错误信息msg","source":"70db8d32da3d7ef0.attach","type":"text/plain","size":7}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":10,"shouldDisplayMessage":false,"hasContent":true},{"name":"请求接口：mregist","time":{"start":1658062602909,"stop":1658062603070,"duration":161},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/Users/xiabo/SoftwareTest/carbonPy/CarbonApi_platform/utils/SceneRequestUtil.py\", line 76, in yamlAndRequest\n    dict['validate']['msg'])\n  File \"/Users/xiabo/SoftwareTest/carbonPy/CarbonApi_platform/utils/requestUtil.py\", line 103, in assertResult\n    assert result.json()['status'] == int(errorCode)\n","steps":[{"name":"发生请求","time":{"start":1658062603068,"stop":1658062603069,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"ce33c5ffa60cf91b","name":"请求路径","source":"ce33c5ffa60cf91b.attach","type":"text/plain","size":40},{"uid":"c74a41f87cb944bb","name":"请求方式","source":"c74a41f87cb944bb.attach","type":"text/plain","size":4},{"uid":"5c613ecba3ea0af0","name":"请求头","source":"5c613ecba3ea0af0.attach","type":"text/plain","size":277},{"uid":"2e409768b600b3c9","name":"请求体","source":"2e409768b600b3c9.attach","type":"text/plain","size":69}],"parameters":[],"stepsCount":0,"attachmentsCount":4,"shouldDisplayMessage":false,"hasContent":true},{"name":"获取响应","time":{"start":1658062603069,"stop":1658062603069,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"ff7247bc119d074a","name":"响应状态码","source":"ff7247bc119d074a.attach","type":"text/plain","size":3},{"uid":"92741bfbc5109dc5","name":"响应头","source":"92741bfbc5109dc5.attach","type":"text/plain","size":179},{"uid":"2e66b5af589bbaef","name":"响应文本","source":"2e66b5af589bbaef.attach","type":"text/plain","size":59}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"断言","time":{"start":1658062603069,"stop":1658062603069,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/Users/xiabo/SoftwareTest/carbonPy/CarbonApi_platform/utils/requestUtil.py\", line 103, in assertResult\n    assert result.json()['status'] == int(errorCode)\n","steps":[],"attachments":[{"uid":"fabc9c50126c24ab","name":"预期响应状态码","source":"fabc9c50126c24ab.attach","type":"text/plain","size":3},{"uid":"ce2619c9049db63e","name":"预期返回错误码 status","source":"ce2619c9049db63e.attach","type":"text/plain","size":3},{"uid":"fe38f856ac95e041","name":"预期返回错误信息msg","source":"fe38f856ac95e041.attach","type":"text/plain","size":18}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":10,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":8,"attachmentsCount":20,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"场景测试02"},{"name":"feature","value":"场景"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_scene"},{"name":"subSuite","value":"TestScene"},{"name":"host","value":"xiabodeMacBook-Air.local"},{"name":"thread","value":"8322-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_scene"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"39826cec4f97fc9f.json","parameterValues":[]}