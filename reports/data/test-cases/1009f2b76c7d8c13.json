{"uid":"1009f2b76c7d8c13","name":"test_secondlevel[getData0]","fullName":"test_cases.test_second_level.TestSecondLevel#test_secondlevel","historyId":"3a85665736f13f644f686d3ad3acdd1e","time":{"start":1657960345153,"stop":1657960345783,"duration":630},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.test_second_level.TestSecondLevel object at 0x7fc0e8937990>\ngetData = {'data': {'csid': '1', 'page': '1'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_secondlevel(self, getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'], url=getData['url'], params=getData['params'],\n                              data=getData['data'], json=getData['json'], headers=getData['headers'])\n    \n        # 断言\n        ru.assertResult(result, getData['validate']['statusCode'], getData['validate']['errorCode'],\n>                       getData['validate']['msg'])\n\n../test_cases/test_second_level.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requestUtil.RequestUtil object at 0x7fc0e02613d0>\nresult = <Response [500]>, statusCode = '200', errorCode = '200'\nmsg = 'success'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        \"\"\"\n        断言实际接口返回数据\n        :param result:\n        :param statusCode:\n        :param errorCode:\n        :param msg:\n        :return:\n        \"\"\"\n        with allure.step('发生请求'):\n            allure.attach(str(result.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code), '响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode), '预期响应状态码')\n            allure.attach(str(errorCode), '预期返回错误码 status')\n            allure.attach(msg, '预期返回错误信息msg')\n    \n>           assert result.status_code == statusCode\nE           AssertionError\n\n../utils/requestUtil.py:102: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"getData","time":{"start":1657960345152,"stop":1657960345152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.test_second_level.TestSecondLevel object at 0x7fc0e8937990>\ngetData = {'data': {'csid': '1', 'page': '1'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_secondlevel(self, getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'], url=getData['url'], params=getData['params'],\n                              data=getData['data'], json=getData['json'], headers=getData['headers'])\n    \n        # 断言\n        ru.assertResult(result, getData['validate']['statusCode'], getData['validate']['errorCode'],\n>                       getData['validate']['msg'])\n\n../test_cases/test_second_level.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requestUtil.RequestUtil object at 0x7fc0e02613d0>\nresult = <Response [500]>, statusCode = '200', errorCode = '200'\nmsg = 'success'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        \"\"\"\n        断言实际接口返回数据\n        :param result:\n        :param statusCode:\n        :param errorCode:\n        :param msg:\n        :return:\n        \"\"\"\n        with allure.step('发生请求'):\n            allure.attach(str(result.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code), '响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode), '预期响应状态码')\n            allure.attach(str(errorCode), '预期返回错误码 status')\n            allure.attach(msg, '预期返回错误信息msg')\n    \n>           assert result.status_code == statusCode\nE           AssertionError\n\n../utils/requestUtil.py:102: AssertionError","steps":[{"name":"发生请求","time":{"start":1657960345779,"stop":1657960345780,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"cfd3e240b2afcb32","name":"请求路径","source":"cfd3e240b2afcb32.attach","type":"text/plain","size":48},{"uid":"5f54fb6f2b1c0899","name":"请求方式","source":"5f54fb6f2b1c0899.attach","type":"text/plain","size":4},{"uid":"64e6d6f5182163b3","name":"请求头","source":"64e6d6f5182163b3.attach","type":"text/plain","size":198},{"uid":"8f1d682cdd76bf11","name":"请求体","source":"8f1d682cdd76bf11.attach","type":"text/plain","size":13}],"parameters":[],"stepsCount":0,"attachmentsCount":4,"shouldDisplayMessage":false,"hasContent":true},{"name":"获取响应","time":{"start":1657960345780,"stop":1657960345781,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"63aa3b85e26a805f","name":"响应状态码","source":"63aa3b85e26a805f.attach","type":"text/plain","size":3},{"uid":"b86dbccfad4e4f9","name":"响应头","source":"b86dbccfad4e4f9.attach","type":"text/plain","size":165},{"uid":"7dd413248f1b027b","name":"响应文本","source":"7dd413248f1b027b.attach","type":"text/html","size":13835}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"断言","time":{"start":1657960345781,"stop":1657960345782,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/Users/xiabo/SoftwareTest/carbonPy/CarbonApi_platform/utils/requestUtil.py\", line 102, in assertResult\n    assert result.status_code == statusCode\n","steps":[],"attachments":[{"uid":"f0213a3f066133f3","name":"预期响应状态码","source":"f0213a3f066133f3.attach","type":"text/plain","size":3},{"uid":"d27559b6013ac7ae","name":"预期返回错误码 status","source":"d27559b6013ac7ae.attach","type":"text/plain","size":3},{"uid":"12f66b92472a5fd3","name":"预期返回错误信息msg","source":"12f66b92472a5fd3.attach","type":"text/plain","size":7}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":10,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"二级分页接口"},{"name":"feature","value":"商品信息"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_second_level"},{"name":"subSuite","value":"TestSecondLevel"},{"name":"host","value":"xiabodeMacBook-Air.local"},{"name":"thread","value":"75561-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_second_level"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"getData","value":"{'name': 'second_level', 'method': 'POST', 'url': 'http://124.223.178.186:8080/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': '1', 'page': '1'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '200', 'msg': 'success'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"28295752987fa3e5","status":"broken","statusDetails":"requests.exceptions.InvalidSchema: No connection adapters were found for '124.223.178.186:8080/shop/mfindByPageCsid'","time":{"start":1657960273890,"stop":1657960273891,"duration":1}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"1009f2b76c7d8c13.json","parameterValues":["{'name': 'second_level', 'method': 'POST', 'url': 'http://124.223.178.186:8080/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': '1', 'page': '1'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '200', 'msg': 'success'}}"]}