{"uid":"21523b6f25ae286f","name":"test_login[getData3]","fullName":"test_cases.test_login.TestLogin#test_login","historyId":"ca7fdac4a01e0b4fed33c8d57157b744","time":{"start":1658062602365,"stop":1658062602468,"duration":103},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_login.TestLogin object at 0x7fb440b8e490>\ngetData = {'data': {'password': '12345', 'username': 'xxxx'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('登录接口')\n    def test_login(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'], url=getData['url'], params=getData['params'],\n                              data=getData['data'], json=getData['json'], headers=getData['headers'])\n    \n        # 断言\n        ru.assertResult(result, getData['validate']['statusCode'], getData['validate']['errorCode'],\n>                       getData['validate']['msg'])\n\n../test_cases/test_login.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requestUtil.RequestUtil object at 0x7fb440712910>\nresult = <Response [200]>, statusCode = '200', errorCode = '400', msg = '用户名不存在'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        \"\"\"\n        断言实际接口返回数据\n        :param result:\n        :param statusCode:\n        :param errorCode:\n        :param msg:\n        :return:\n        \"\"\"\n        with allure.step('发生请求'):\n            allure.attach(str(result.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code), '响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode), '预期响应状态码')\n            allure.attach(str(errorCode), '预期返回错误码 status')\n            allure.attach(msg, '预期返回错误信息msg')\n    \n            assert result.status_code == int(statusCode)\n            assert result.json()['status'] == int(errorCode)\n>           assert result.json()['msg'] == msg\nE           AssertionError\n\n../utils/requestUtil.py:104: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"getData","time":{"start":1658062602365,"stop":1658062602365,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_login.TestLogin object at 0x7fb440b8e490>\ngetData = {'data': {'password': '12345', 'username': 'xxxx'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('登录接口')\n    def test_login(self,getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'], url=getData['url'], params=getData['params'],\n                              data=getData['data'], json=getData['json'], headers=getData['headers'])\n    \n        # 断言\n        ru.assertResult(result, getData['validate']['statusCode'], getData['validate']['errorCode'],\n>                       getData['validate']['msg'])\n\n../test_cases/test_login.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requestUtil.RequestUtil object at 0x7fb440712910>\nresult = <Response [200]>, statusCode = '200', errorCode = '400', msg = '用户名不存在'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        \"\"\"\n        断言实际接口返回数据\n        :param result:\n        :param statusCode:\n        :param errorCode:\n        :param msg:\n        :return:\n        \"\"\"\n        with allure.step('发生请求'):\n            allure.attach(str(result.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code), '响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode), '预期响应状态码')\n            allure.attach(str(errorCode), '预期返回错误码 status')\n            allure.attach(msg, '预期返回错误信息msg')\n    \n            assert result.status_code == int(statusCode)\n            assert result.json()['status'] == int(errorCode)\n>           assert result.json()['msg'] == msg\nE           AssertionError\n\n../utils/requestUtil.py:104: AssertionError","steps":[{"name":"发生请求","time":{"start":1658062602466,"stop":1658062602467,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"88e193e10a8703b8","name":"请求路径","source":"88e193e10a8703b8.attach","type":"text/plain","size":39},{"uid":"d4c9e2f4718f751d","name":"请求方式","source":"d4c9e2f4718f751d.attach","type":"text/plain","size":4},{"uid":"52fb539b10a4a607","name":"请求头","source":"52fb539b10a4a607.attach","type":"text/plain","size":198},{"uid":"7e834dab159f778b","name":"请求体","source":"7e834dab159f778b.attach","type":"text/plain","size":28}],"parameters":[],"stepsCount":0,"attachmentsCount":4,"shouldDisplayMessage":false,"hasContent":true},{"name":"获取响应","time":{"start":1658062602467,"stop":1658062602467,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"f2a9ed351411359b","name":"响应状态码","source":"f2a9ed351411359b.attach","type":"text/plain","size":3},{"uid":"ee1f4a76a72a7c17","name":"响应头","source":"ee1f4a76a72a7c17.attach","type":"text/plain","size":262},{"uid":"203b88b31ae1e3d9","name":"响应文本","source":"203b88b31ae1e3d9.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":false,"hasContent":true},{"name":"断言","time":{"start":1658062602467,"stop":1658062602467,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/Users/xiabo/SoftwareTest/carbonPy/CarbonApi_platform/utils/requestUtil.py\", line 104, in assertResult\n    assert result.json()['msg'] == msg\n","steps":[],"attachments":[{"uid":"dd48dbeca45bb957","name":"预期响应状态码","source":"dd48dbeca45bb957.attach","type":"text/plain","size":3},{"uid":"49195ee0ff5bb064","name":"预期返回错误码 status","source":"49195ee0ff5bb064.attach","type":"text/plain","size":3},{"uid":"26bdc32fbab693fe","name":"预期返回错误信息msg","source":"26bdc32fbab693fe.attach","type":"text/plain","size":18}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":10,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"登录接口"},{"name":"feature","value":"用户"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"xiabodeMacBook-Air.local"},{"name":"thread","value":"8322-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"getData","value":"{'name': 'login', 'method': 'POST', 'url': 'http://124.223.178.186:8080/shop/mlogin', 'headers': None, 'params': None, 'data': {'username': 'xxxx', 'password': '12345'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': '用户名不存在'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"21523b6f25ae286f.json","parameterValues":["{'name': 'login', 'method': 'POST', 'url': 'http://124.223.178.186:8080/shop/mlogin', 'headers': None, 'params': None, 'data': {'username': 'xxxx', 'password': '12345'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '400', 'msg': '用户名不存在'}}"]}