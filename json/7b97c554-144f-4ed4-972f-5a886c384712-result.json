{"name": "test_secondlevel[getData1]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_second_level.TestSecondLevel object at 0x7feb002dc350>\ngetData = {'data': {'csid': '2', 'page': '2'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_secondlevel(self, getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'], url=getData['url'], params=getData['params'],\n                              data=getData['data'], json=getData['json'], headers=getData['headers'])\n    \n        # 断言\n        ru.assertResult(result, getData['validate']['statusCode'], getData['validate']['errorCode'],\n>                       getData['validate']['msg'])\n\n../test_cases/test_second_level.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requestUtil.RequestUtil object at 0x7feb20319e10>\nresult = <Response [200]>, statusCode = '200', errorCode = '200'\nmsg = 'success'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        \"\"\"\n        断言实际接口返回数据\n        :param result:\n        :param statusCode:\n        :param errorCode:\n        :param msg:\n        :return:\n        \"\"\"\n        with allure.step('发生请求'):\n            allure.attach(str(result.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code), '响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode), '预期响应状态码')\n            allure.attach(str(errorCode), '预期返回错误码 status')\n            allure.attach(msg, '预期返回错误信息msg')\n    \n            assert result.status_code == int(statusCode)\n>           assert result.json()['status'] == int(errorCode)\nE           AssertionError\n\n../utils/requestUtil.py:103: AssertionError"}, "steps": [{"name": "发生请求", "status": "passed", "attachments": [{"name": "请求路径", "source": "4c4e4a3b-9872-40d2-91d3-2fb82a730eb0-attachment.attach"}, {"name": "请求方式", "source": "ae720e54-30d4-419d-9668-f4ccae966d16-attachment.attach"}, {"name": "请求头", "source": "33730622-19a2-4fd9-9f26-cedebae4d574-attachment.attach"}, {"name": "请求体", "source": "66fe8bd3-6ad8-4b37-a146-f99fa86773d7-attachment.attach"}], "start": 1657986031485, "stop": 1657986031485}, {"name": "获取响应", "status": "passed", "attachments": [{"name": "响应状态码", "source": "586b6d95-e38a-4ecd-bb46-a41683fea2a3-attachment.attach"}, {"name": "响应头", "source": "76be2293-bdc8-41fb-a581-c69b599b4faf-attachment.attach"}, {"name": "响应文本", "source": "96ca93b0-8173-418a-b211-fd9111f5b54e-attachment.attach"}], "start": 1657986031485, "stop": 1657986031486}, {"name": "断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"/Users/xiabo/SoftwareTest/carbonPy/CarbonApi_platform/utils/requestUtil.py\", line 103, in assertResult\n    assert result.json()['status'] == int(errorCode)\n"}, "attachments": [{"name": "预期响应状态码", "source": "5db2952d-c78b-49c3-a0b3-4bc4e6ecb9c5-attachment.attach"}, {"name": "预期返回错误码 status", "source": "c8641708-3843-405c-9a94-0185d9617577-attachment.attach"}, {"name": "预期返回错误信息msg", "source": "c67054d5-d0a2-4351-b23b-017391c410df-attachment.attach"}], "start": 1657986031486, "stop": 1657986031486}], "parameters": [{"name": "getData", "value": "{'name': 'second_level', 'method': 'POST', 'url': 'http://124.223.178.186:8080/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': '2', 'page': '2'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '200', 'msg': 'success'}}"}], "start": 1657986031309, "stop": 1657986031486, "uuid": "aa5a30e9-c164-4bac-8758-cfee75e52292", "historyId": "b3a3be4a19d32f314ec1565e6d20f7ac", "testCaseId": "ad570678db19f2b9498671ff5902b23f", "fullName": "test_cases.test_second_level.TestSecondLevel#test_secondlevel", "labels": [{"name": "feature", "value": "商品信息"}, {"name": "story", "value": "二级分页接口"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_second_level"}, {"name": "subSuite", "value": "TestSecondLevel"}, {"name": "host", "value": "xiabodeMacBook-Air.local"}, {"name": "thread", "value": "84790-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_second_level"}]}