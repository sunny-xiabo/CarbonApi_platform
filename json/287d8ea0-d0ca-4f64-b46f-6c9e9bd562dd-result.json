{"name": "test_secondlevel[getData1]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_second_level.TestSecondLevel object at 0x7f9248d3bf90>\ngetData = {'data': {'csid': '2', 'page': '2'}, 'headers': None, 'json': None, 'method': 'POST', ...}\n\n    @allure.story('二级分页接口')\n    def test_secondlevel(self, getData):\n        # 发送请求\n        result = ru.doRequest(method=getData['method'], url=getData['url'], params=getData['params'],\n                              data=getData['data'], json=getData['json'], headers=getData['headers'])\n    \n        # 断言\n        ru.assertResult(result, getData['validate']['statusCode'], getData['validate']['errorCode'],\n>                       getData['validate']['msg'])\n\n../test_cases/test_second_level.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requestUtil.RequestUtil object at 0x7f9248d34a50>\nresult = <Response [200]>, statusCode = '200', errorCode = '200'\nmsg = 'success'\n\n    def assertResult(self, result, statusCode, errorCode, msg):\n        \"\"\"\n        断言实际接口返回数据\n        :param result:\n        :param statusCode:\n        :param errorCode:\n        :param msg:\n        :return:\n        \"\"\"\n        with allure.step('发生请求'):\n            allure.attach(str(result.url), '请求路径')\n            allure.attach(str(result.request.method), '请求方式')\n            allure.attach(str(result.request.headers), '请求头')\n            allure.attach(str(result.request.body), '请求体')\n    \n        with allure.step('获取响应'):\n            allure.attach(str(result.status_code), '响应状态码')\n            allure.attach(str(result.headers), '响应头')\n            allure.attach(str(result.text), '响应文本')\n    \n        with allure.step('断言'):\n            allure.attach(str(statusCode), '预期响应状态码')\n            allure.attach(str(errorCode), '预期返回错误码 status')\n            allure.attach(msg, '预期返回错误信息msg')\n    \n            assert result.status_code == int(statusCode)\n>           assert result.json()['status'] == int(errorCode)\nE           AssertionError\n\n../utils/requestUtil.py:103: AssertionError"}, "steps": [{"name": "发生请求", "status": "passed", "attachments": [{"name": "请求路径", "source": "20e30483-503e-47e0-8d52-3d719ca31a7e-attachment.attach"}, {"name": "请求方式", "source": "74075e4a-4d50-4b3e-bad6-63ab98bae0f1-attachment.attach"}, {"name": "请求头", "source": "a1404375-93ba-402c-8dfd-94b97b7ece22-attachment.attach"}, {"name": "请求体", "source": "760dfe64-61d2-44f2-8466-269e91b16dc7-attachment.attach"}], "start": 1658110712920, "stop": 1658110712920}, {"name": "获取响应", "status": "passed", "attachments": [{"name": "响应状态码", "source": "7f9c8738-afac-4c44-81e2-4fd69bb80b4e-attachment.attach"}, {"name": "响应头", "source": "a9aed273-faa4-447f-8d3d-8a5fd897d7d2-attachment.attach"}, {"name": "响应文本", "source": "1b897eac-30e2-4227-9bed-0e90aff28725-attachment.attach"}], "start": 1658110712920, "stop": 1658110712921}, {"name": "断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"/Users/xiabo/SoftwareTest/carbonPy/CarbonApi_platform/utils/requestUtil.py\", line 103, in assertResult\n    assert result.json()['status'] == int(errorCode)\n"}, "attachments": [{"name": "预期响应状态码", "source": "ea03dff5-5e6e-4be7-ad81-2f128b017550-attachment.attach"}, {"name": "预期返回错误码 status", "source": "0cb85b3b-fa4b-45c4-aac0-6ff75e3deb00-attachment.attach"}, {"name": "预期返回错误信息msg", "source": "2265ed9a-ed55-4e51-a27b-9923ee653cbb-attachment.attach"}], "start": 1658110712921, "stop": 1658110712921}], "parameters": [{"name": "getData", "value": "{'name': 'second_level', 'method': 'POST', 'url': 'http://124.223.178.186:8080/shop/mfindByPageCsid', 'headers': None, 'params': None, 'data': {'csid': '2', 'page': '2'}, 'json': None, 'validate': {'statusCode': '200', 'errorCode': '200', 'msg': 'success'}}"}], "start": 1658110712693, "stop": 1658110712921, "uuid": "74b5293c-5d05-467f-92d1-6584552dec00", "historyId": "b3a3be4a19d32f314ec1565e6d20f7ac", "testCaseId": "ad570678db19f2b9498671ff5902b23f", "fullName": "test_cases.test_second_level.TestSecondLevel#test_secondlevel", "labels": [{"name": "story", "value": "二级分页接口"}, {"name": "feature", "value": "商品信息"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_second_level"}, {"name": "subSuite", "value": "TestSecondLevel"}, {"name": "host", "value": "xiabodeMacBook-Air.local"}, {"name": "thread", "value": "9086-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_second_level"}]}